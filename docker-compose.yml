version: "3"
services:
  mc_host_api:
    build: mc-host-api
    hostname: api
    expose:
      - 8080
    environment:
      STRIPE_API_KEY: ${STRIPE_SK}
      STRIPE_API_ENDPOINT_SECRET: ${STRIPE_WHOOK}
      DOCKER_HOST: unix://${DOCKER_HOST}
      DATABASE_URL: "jdbc:postgresql://database:5432/${DATABASE_NAME}"
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASS: ${DATABASE_PASS}
    volumes:
      - "${DOCKER_SOCK}:${DOCKER_HOST}"
    networks:
      mc_host_network:
    depends_on:
      - mc_host_database

  mc_host_front:
    build: mc-host-front
    hostname: front
    expose:
      - 80
    environment:
      VITE_STRIPE_PUBLIC_KEY: ${STRIPE_PK}
      VITE_API_BASE_URL: ${API_ENDPOINT}/api
    networks:
      mc_host_network:

  mc_host_database:
    image: postgres:latest
    hostname: database
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
    expose:
      - 5432
    networks:
      mc_host_network:

  mc_host_ftp:
    build: mc-host-ftp
    environment:
      PGHOST: database
      PGUSER: ${DATABASE_USER}
      PGPASSWORD: ${DATABASE_PASS}
      PGDATABASE: ${DATABASE_NAME}
      PGPORT: 5432
      CONTAINER_DIRECTORY: ${CONTAINER_DIRECTORY}
    ports:
      - "2121:2121"
    networks:
      mc_host_network:
    depends_on:
      - mc_host_database

  mc_host_proxy:
    image: nginx:1.23-alpine
    volumes:
      - "./nginx:/etc/nginx:ro"
    ports:
      - "80:80"
    networks:
      mc_host_network:
    depends_on:
      - mc_host_api
      - mc_host_front

networks:
  mc_host_network: